summary(fit.int)
fit1=lm(mpg~cyl.factors+wt,data=mtcars)
summary(fit1)
?mtcars
simple.model = lm(mpg~.,data=mtcars)
summary(simple.model)$coef
par(mfrow=c(2,2))
plot(simple.model)
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
plot(x,y)
q5=as.data.frame(x,y)
inTrain = createDataPartition(adData$diagnosis, p
)
q5=data.frame(x,y)
str(q5)
q5fit=lm(y~x,data-q5)
summary(q5fit)
hatvalues(q5fit)
q5fit=lm(y~x,data=q5)
summary(q5fit)
hatvalues(q5fit)
dfbetas(q5fit)
simple.model = lm(mpg~.,data=mtcars)
summary(simple.model)$coef
par(mfrow=c(2,2))
plot(simple.model)
plot(simple.model)[1,1]
plot(simple.model)
str(mtcars)
summary(lm(mpg~.-cyl-disp-hp-vs-gear-drat-carb+am*wt,data=mtcars))
model2=lm(mpg~wt+qsec+am+am*wt,data=mtcars)
summary(model2)
model2=lm(mpg~wt+qsec+am+am*wt,data=mtcars)
simple.model = lm(mpg~.,data=mtcars)
summary(simple.model)
sortedcors=sort(cor(mtcars)[2:ncol(mtcars),1],decreasing=TRUE)
data(mtcars)
str(mtcars)
str(mtcars)
summary(mtcars)
tables(mtcars$cyl)
table(mtcars$cyl)
table(mtcars$vs)
table(mtcars$gear)
table(mtcars$carb)
?mtcars
mtcars2 =mtcars
mtcars2$cyl=as.factor(mtcars2$cyl)
mtcars2$vs=as.factor(mtcars2$vs)
mtcars2$am=as.factor(mtcars2$am)
mtcars2$gear=as.factor(mtcars2$gear)
simple.model = lm(mpg~.,data=mtcars2)
summary(simple.model)
cor(mtcars)
model2=lm(mpg~.-cyl-disp-hp-drat-gear-carb,data=mtcars)
summary(model2)
model2=lm(mpg~.-cyl-disp-hp-drat-gear-carb-vs,data=mtcars)
summary(model2)
par(mfrow=c(2,2))
plot(model2)
model3=lm(mpg~.-cyl-disp-hp-drat-gear-carb-vs+am*wt,data=mtcars)
summary(model3)
plot(model3)
?cars
?mtcars
str(mtcars)
mtcars
mtcars[c("Fiat 128")]
mtcars[c("Fiat 128"),]
x[-c("Fiat 128")]
x[-c("Fiat 128"),]
x=mtcars
x[-c("Fiat 128"),]
x
mydata=mtcars
x
str(x)
x=subset(x,x!="Fiat 128")
x
mtcars[1,1]
rownames(mtcars)
mtcars[18,]
x=rbind(mtcars[1:17],mtcars[19:32]
)
x=rbind(mtcars[1:17,],mtcars[19:32,])
x
str(x)
mtcars3=rbind(mtcars[1:17,],mtcars[19:32,])
model2=lm(mpg~.-cyl-disp-hp-drat-gear-carb-vs,data=mtcars2)
summary(model2)
par(mfrow=c(2,2))
plot(model2)
model3=lm(mpg~.-cyl-disp-hp-drat-gear-carb-vs+am*wt,data=mtcars2)
summary(model3)
par(mfrow=c(2,2))
plot(model3)
mtcars3=rbind(mtcars2[1:17,],mtcars2[19:32,])
model4=lm(mpg~.-cyl-disp-hp-drat-gear-carb-vs+am*wt,data=mtcars3)
summary(model4)
par(mfrow=c(2,2))
plot(model4)
?mtcars
R.version.string
install.packages("swirl")
library(swirl)
swirl()
plot(child~parent,galton)
plot(jitter(child,4)~parent,galton)
regrline=lm(child~parent,galton)
regrline<-lm(child~parent,galton)
abline(regrline,lwd=3,col='red')
summary(regrline)
fit <- lm(child~parent,galton)
summary(fit)
mean(fit$residuals)
cov(fit$residuals,galton$parent)
ols.ic = fit$coef[1]
ols.ic <- fit$coef[1]
ols.slope <- fit$coef[2]
rhs - lhs
lhs-rhs
all.equal(lhs,rhs)
varChild<-var(galton$child)
varRes<-var(fit$residuals)
varEst <- est(ols.ic,ols.slope)
varEst <- var(est(ols.slope,ols.ic))
all.equal(varChild,varRes+varEst)
efit<-lm(accel~mag+dist,attenu)
mean(efit$residuals)
cov(efit$residuals,attenu$mag)
cov(efit$residuals,attenu$dist)
cor(gpa_nor,gch_nor)
l_nor <- lm(gch_nor~gpa_nor)
6
dim(InsectSprays)
head(InsectSprays,15)
sA
summary(InsectSpray[,2])
summary(InsectSprays[,2])
sapply(InsectSprays,class)
fit<-lm(count~spray,InsectSprays)
summary(fit$coef)
summary(fit)$coef
est <- summary(fit)$coef[,1]
mean(sA)
mean(sB)
nfit<-lm(count~spray-1,InsectSprays)
summary(nfit)$coef
spray2=relevel(InsectSprayspray,C)
spray2=relevel(InsectSprays$spray,C)
spray2=relevel(InsectSprays$spray,InsectSprays$sprayC)
spray2=relevel(InsectSprays$spray,"C")
spray2=relevel(InsectSprays$spray,\"C\")
spray2=relevel(InsectSprays$spray,\"C\")"
spray2<-relevel(InsectSprays$spray,\"C\")
spray2<-relevel(InsectSprays$spray,"C")
fit2<-lm(count~spray,spray2)
str(spray2)
fit2 <- lm(count ~ spray2, InsectSprays)
summary(fit2)$coef
mean(sC)
(fit$coef[2]-fit$coef[3])/1.6011
fit <- lm(child~parent,galton)
sqrt(sum(fit$residuals^2)/(n-2))
summary(fit)$sigma
sqrt(deviance(fit)/(n-2))
mu <- mean(galton$child)
sTot <- sum((galton$child - mu)^2)
sRes <- deviance(fit$residuals)
sRes <- deviance(fit$residuals)
sRes <- deviance(fit$residuals^2)
sRes <- deviance(fit)
1-sRes/sTot
summary(fit)$r
summary(fit)$r.squared
cor(galton$child,galton$parent)^2
?shuttle
library(MASS)
library(MASS)
?shuttle
str(shuttle)
logRegSh = glm(shuttle$auto~shuttle$wing,family="binomial")
logRegSh = glm(shuttle$use~shuttle$wing,family="binomial")
summary(shuttle)
logRegSh = glm(shuttle$use~shuttle$wind,family="binomial")
summary(logRegSh)
exp(-.03181)
str(shuttle)
logRegSh2 = glm(shuttle$use~shuttle$wind+shuttle$magn,family="binomial")
summary(logRegSh2)
exp(-3.201e-02)
shuttle2=shuttle
shuttle2$use2=1-shuttle2$use
shuttle2$use2=1-as.number(shuttle2$use)
shuttle2$use2=1-as.numeric(shuttle2$use)
shuttle2$use2=as.factor(shuttle2$use2)
Inverse.logRegSh = glm(shuttle2$use2~shuttle$wing,family="binomial")
Inverse.logRegSh = glm(shuttle2$use2~shuttle$wind,family="binomial")
summary*Inverse.logRegSh
summary(Inverse.logRegSh)
summary(logRegSh)
str(InsectSprays)
pois.mod=glm(InsectSprays$count~InsectSprays$spray,family="poisson")
summary(pois.mod)
exp(0.05588 )
exp(-0.05588 )
x <- -5:5
y <- c(5.12, 3.93, 2.67, 1.87, 0.52, 0.08, 0.93, 2.05, 2.54, 3.87, 4.97)
plot(x,y)
install.packages("shiny")
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
str(voweltrain)
str(vowel.train)
dim(vowel.train)
vowel.train$y=as.factor(vowel.train$y)
vowel.test$y=as.factor(vowel.test$y)
set.seed(33833)
RF=train(y~.,vowel.train,method="rf")
library(Caret)
library(caret)
RF=train(y~.,vowel.train,method="rf")
RF
GBM=train(y~.,vowel.train,method="gbm",verbose=FALSE)
print(GBM)
RFpred=predictions(RF,test.vowel)
RFpred=predict(RF,test.vowel)
RFpred=predict(RF,vowel.test)
RFpred
GBMpred=predict(GBM,vowel.test)
confusionMatrix(RFpred,vowel.test$y)
Accuracy : 0.5974
confusionMatrix(GBMpred,vowel.test$y)
Accuracy : 0.5325
set.seed(33833)
RFpred=predictions(RF,test.vowel)
set.seed(33833)
RFpred=predict.train(RF,test.vowel)
RFpred=predict(RF,test.vowel)
RFpred=predict(RF,vowel.test)
confusionMatrix(RFpred,vowel.test$y)
confusionMatrix(GBMpred,vowel.test$y)
confusionMatrix(GBMpred,RFpred)
library(caret)
library(gbm)
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
rf,gbm, lda
modRF=train(training~.,method="rf",data=training)
str(training)
modRF=train(diagnosis~.,method="rf",data=training)
rf,gbm, lda
modGBM=train(diagnosis~.,method="gbm",data=training)
modLDA=train(diagnosis~.,method="lda",data=training)
set.seed(62433)
modRF=train(diagnosis~.,method="rf",data=training)
modGBM=train(diagnosis~.,method="gbm",data=training)
modLDA=train(diagnosis~.,method="lda",data=training)
predRF=predict(modRF,testing)
predGBM=predict(modGBM,testing)
predLDA=predict(modLDA,testing)
predDF=data.frame(predRF,predGBM,predLDA,d=testing$diagnosis)
combModFit=train(d~.,method="rf",data=predDF)
combPred=predict(combModFit,predDF)
confusionMatrix(combModFit,testing$diagnosis)
combModFit
modRF
modGBM
modLDA
combModFit
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(233)
dim(concrete)
str(concrete)
modLASSO=train(CompressiveStrength~.,method="lasso",data=training)
modLASSO=train(CompressiveStrength~.,method="lasso",data=training)
modLASSO
modLASSO$finalModel
?plot.enet
plot.enet(modLASSO$finalModel,xvar="penalty")
download.file('https://d396qusza40orc.cloudfront.net/predmachlearn/gaData.csv', temp, method='curl')
temp = tempfile()
download.file('https://d396qusza40orc.cloudfront.net/predmachlearn/gaData.csv', temp, method='curl')
library(lubridate)
dat=read.csv(temp)
str(dat)
training = dat[year(dat$date) < 2012,]
testing = dat[(year(dat$date)) > 2011,]
tstrain = ts(training$visitsTumblr)
library(forecast)
install.packages("forecast")
library(forecast)
fit=bats(training)
str(training)
fit=bats(tstrain)
plot(forecast(fit))
f=forecast(fit)
f
str(f)
dim(f)
tstest = ts(testing$visitsTumblr)
f
fit=bats(tstrain)
trainforecast=forecast(fit)
trainforecast
tstest = ts(testing$visitsTumblr)
tstest
min(tstest)
max(tstest)
fit
max(tstest)
test.ordered=tstest
test.ordered=order(test.ordered)
test.ordered
max(test.ordered)
rm(test.ordered)
fit.train=bats(tstrain)
plot(forecast(fit.train))
fcast.train=forecast(fit.train)
plot(fcast.train)
lines(tstest,col="red")
?forecast
str(dat)
dim(testing)
dim(training)
fit.train
train.forecast=forecast(fit.train)
train.forecast
train.forecast=forecast(fit.train,h=235)
train.forecast
head(train.forecast)
str(train.forecast)
tstest
min(tstest)
str(train.forecast)
upper=train.forecast$upper
lower=train.forecast$lower
lower
upper
str(train.forecast)
lower=train.forecast$lower[,2]
lower
lower=train.forecast$lower[,1]
lower
lower=train.forecast$lower[,2]
lower
upper=train.forecast$upper[,2]
tstest
tstest>upper
table(tstest>upper)
table(tstest<lower)
9/235
1-9/235
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(325)
library(e1071)
str(concrete)
model=svm(CompressiveStrength~.,concrete)
model
model=svm(CompressiveStrength~.,training)
pred=predict(model,training)
pred=predict(model,testing)
pred
error=testing$CompressiveStrength-pred
error
SVMrmse=rsme(error)
rmse <- function(error)
{
sqrt(mean(error^2))
}
SVMrmse=rsme(error)
rmse <- function(error)
{
sqrt(mean(error^2))
}
SVMrmse=rmse(error)
SVMrmse
library(caret)
library(gbm)
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
set.seed(62433)
modRF=train(diagnosis~.,method="rf",data=training)
predRF=predict(modRF,testing)
table(predRF,testing$diagnosis)
accuracyRF=(11+52)/(22+8+52)
accuracyRF
modGBM=train(diagnosis~.,method="gbm",data=training)
predGBM=predict(modGBM,testing)
table(predGBM,testing$diagnosis)
accuracyGBM=(14+51)/(14+51+8+9)
accuracyGBM
modLDA=train(diagnosis~.,method="lda",data=training)
predLDA=predict(modLDA,testing)
table(predLDA,testing$diagnosis)
accuracyLDA=(16+47)/(16+47+13+6)
accuracyLDA
accuracyGBM
accuracyRF
library(manipulate)
myPlot <- function(s) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0, s)
}
library(manipulate)
myPlot <- function(s) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0, s)
}
myPlot
myPlot(2)
myPlot(.2)
manipulate(myPlot, s = slider(0, 2, step = 0.1))
manipulate(myPlot, s = slider(0, 2, step = 0.1))
manipulate(myPlot, s = slider(0, 2, step = 0.1))
manipulate(myPlot(s), slider = x(0, 2, step = 0.1))
manipulate(myPlot(s), s = slider(0, 2, step = 0.1))
manipulate(myPlot(s), x.s = slider(0, 2, step = 0.1))
library(airquality)
data(airquality)
summary(airquality)
library(rCharts)
install.packages("rCharts")
require(devtools)
install_github('rCharts', 'ramnathv')
library(devtools)
install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
require(devtools)
install_github('rCharts', 'ramnathv')
dTable(airquality, sPaginationType = "full_numbers")
library(rCharts)
dTable(airquality, sPaginationType = "full_numbers")
library(shiny)
runApp()
ilbrary(UsingR)
library(UsingR)
install.packages("UsingR")
runApp()
runApp()
runApp()
shinyapps::setAccountInfo(name='jebradfield', token='1886241AE4A813B7103A70711405C75B', secret='b15t1W+01tM/WNLl2RzIG/88HyzLQ9W5M3u2i2pw')
devtools::install_github('rstudio/shinyapps')
shinyapps::setAccountInfo(name='jebradfield', token='1886241AE4A813B7103A70711405C75B', secret='b15t1W+01tM/WNLl2RzIG/88HyzLQ9W5M3u2i2pw')
getwd()
setwd("/Users/jasonbradfield/Documents/DevDataProd")
getwd()
deployApp(appName="my2ndApp")
library(shinyapps)
deployApp(appName="my2ndApp")
devtools::install_github('rstudio/packrat')
deployApp(appName="my2ndApp")
deployApp(appName="my2ndApp")
runApp()
x=0
runApp(display.mode='showcase').
runApp(display.mode='showcase')
runApp(display.mode='showcase')
runApp(display.mode='showcase')
x=0
runApp(display.mode='showcase')
runApp(display.mode='showcase')
runApp(display.mode='showcase')
runApp(display.mode='showcase')
runApp(display.mode='showcase')
runApp(display.mode='showcase')
runApp(display.mode='showcase')
install_github('slidify', 'ramnathv')
install_github('slidifyLibraries', 'ramnathv')
library(slidify)
install.packages("devtools")
library(devtools)
install_github('slidify', 'ramnathv')
install_github('slidifyLibraries', 'ramnathv')
library(slidify)
install.packages("devtools")
library(slidify)
library(devtools)
require(devtools)
install_github("slidify","ramnathv")
install_github("slidify","ramnathv/slidify")
install_github("slidify","ramnathv/slidify")
install_github("slidify","ramnathv/slidify/slidify")
install_github('ramnathv/slidify')
library(slidify)
install_github('ramnathv/slidifyLibraries')
library(slidify)
